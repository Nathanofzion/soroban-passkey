{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAC5C,OAAO,EAAE,uBAAuB,EAAE,+BAA+B,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,MAAM,yBAAyB,CAAC;AAK3I,MAAM,OAAO,WAAY,SAAQ,SAAS;IAExC,KAAK,CAAC,iBAAiB,CAAC,sCAA8E;QACpG,IAAI,GAAG,CAAC;QACR,IAAI;YACF,GAAG,GAAG,MAAM,iBAAiB,CAAC,sCAAsC,CAAC,CAAC;SACvE;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;SAC7B;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;IAC7B,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,kBAAyD,EAAE,kBAA4B;QAC/G,IAAI,GAAG,CAAC;QACR,IAAI;YACF,GAAG,GAAG,MAAM,mBAAmB,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;SACzE;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;SAC7B;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;IAC7B,CAAC;IAED,KAAK,CAAC,mBAAmB;QACvB,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,2BAA2B;QAC/B,OAAO,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;IAC9C,CAAC;IAEO,KAAK,CAAC,WAAW,CAAC,IAAqC;QAC7D,IAAI,GAAG,GAAG,KAAK,CAAC;QAChB,IAAI,IAAI,KAAK,UAAU,EAAE;YACvB,GAAG,GAAG,MAAM,uBAAuB,EAAE,CAAC;SACvC;QACD,IAAI,IAAI,KAAK,kBAAkB,EAAE;YAC/B,GAAG,GAAG,MAAM,+BAA+B,EAAE,CAAC;SAC/C;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;IACzC,CAAC;CAEF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport { browserSupportsWebAuthn, browserSupportsWebAuthnAutofill, startAuthentication, startRegistration } from '@simplewebauthn/browser';\nimport { AuthenticationResponseJSON, PublicKeyCredentialCreationOptionsJSON, PublicKeyCredentialRequestOptionsJSON, RegistrationResponseJSON } from '@simplewebauthn/types';\n\nimport type { WebAuthnPlugin } from './definitions';\n\nexport class WebAuthnWeb extends WebPlugin implements WebAuthnPlugin {\n\n  async startRegistration(publicKeyCredentialCreationOptionsJSON: PublicKeyCredentialCreationOptionsJSON): Promise<RegistrationResponseJSON> {\n    let res;\n    try {\n      res = await startRegistration(publicKeyCredentialCreationOptionsJSON);\n    } catch (error) {\n      return Promise.reject(error)\n    }\n    return Promise.resolve(res)\n  }\n\n  async startAuthentication(requestOptionsJSON: PublicKeyCredentialRequestOptionsJSON, useBrowserAutofill?: boolean): Promise<AuthenticationResponseJSON> {\n    let res;\n    try {\n      res = await startAuthentication(requestOptionsJSON, useBrowserAutofill);\n    } catch (error) {\n      return Promise.reject(error)\n    }\n    return Promise.resolve(res)\n  }\n\n  async isWebAuthnAvailable(): Promise<{ value: boolean }> {\n    return this.isAvailable('webauthn');\n  }\n\n  async isWebAuthnAutoFillAvailable(): Promise<{ value: boolean }> {\n    return this.isAvailable('webauthnautofill');\n  }\n\n  private async isAvailable(type: 'webauthn' | 'webauthnautofill'): Promise<{ value: boolean }> {\n    let val = false;\n    if (type === 'webauthn') {\n      val = await browserSupportsWebAuthn();\n    }\n    if (type === 'webauthnautofill') {\n      val = await browserSupportsWebAuthnAutofill();\n    }\n    return Promise.resolve({ value: val });\n  }\n\n}\n"]}